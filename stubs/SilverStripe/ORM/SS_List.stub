<?php

namespace SilverStripe\ORM;

use ArrayAccess;
use Countable;
use IteratorAggregate;

/**
 * An interface that a class can implement to be treated as a list container.
 *
 * @template T
 * @extends ArrayAccess<array-key, T>
 * @extends IteratorAggregate<array-key, T>
 */
interface SS_List extends ArrayAccess, Countable, IteratorAggregate
{

    /**
     * Returns all the items in the list in an array.
     *
     * @return array<T>
     */
    public function toArray();

    /**
     * Returns the contents of the list as an array of maps.
     *
     * @return string[][]
     */
    public function toNestedArray();

    /**
     * Adds an item to the list, making no guarantees about where it will
     * appear.
     *
     * @param T $item
     * @return void
     */
    public function add($item);

    /**
     * Removes an item from the list.
     *
     * @param T $item
     * @return void
     */
    public function remove($item);

    /**
     * Returns the first item in the list.
     *
     * @return T|null
     */
    public function first();

    /**
     * Returns the last item in the list.
     *
     * @return T|null
     */
    public function last();

    /**
     * Returns the first item in the list where the key field is equal to the
     * value.
     *
     * @param  string $key
     * @param  string $value
     * @return T|null
     */
    public function find($key, $value);

    /**
     * Returns an array of a single field value for all items in the list.
     *
     * @param  string $colName
     * @return array<string>
     */
    public function column($colName = "ID");

    /**
     * Walks the list using the specified callback
     *
     * @param callable(T): void $callback
     * @return static<T>
     */
    public function each($callback);
}
