<?php

namespace SilverStripe\ORM;

/**
 * Implements a "lazy loading" DataObjectSet.
 * Uses {@link DataQuery} to do the actual query generation.
 *
 * DataLists are _immutable_ as far as the query they represent is concerned. When you call a method that
 * alters the query, a new DataList instance is returned, rather than modifying the existing instance
 *
 * When you add or remove an element to the list the query remains the same, but because you have modified
 * the underlying data the contents of the list changes. These are some of those methods:
 *
 *   - add
 *   - addMany
 *   - remove
 *   - removeMany
 *   - removeByID
 *   - removeByFilter
 *   - removeAll
 *
 * Subclasses of DataList may add other methods that have the same effect.
 * 
 * @template T of \SilverStripe\ORM\DataObject
 * @implements \SilverStripe\ORM\SS_List<T>
 * @implements \SilverStripe\ORM\Filterable<T>
 * @implements \SilverStripe\ORM\Sortable<T>
 * @implements \SilverStripe\ORM\Limitable<T>
 */
class DataList extends \SilverStripe\View\ViewableData implements \SilverStripe\ORM\SS_List, \SilverStripe\ORM\Filterable, \SilverStripe\ORM\Sortable, \SilverStripe\ORM\Limitable
{
    /**
     * Return an array of the actual items that this DataList contains at this stage.
     * This is when the query is actually executed.
     *
     * @return array<T>
     */
    public function toArray()
    {
    }
    /**
     * Return this list as an array and every object it as an sub array as well
     *
     * @return string[][]
     */
    public function toNestedArray()
    {
    }
    /**
     * Walks the list using the specified callback
     *
     * @param callable(T): void $callback
     * @return static<T>
     */
    public function each($callback)
    {
    }
    public function getIterator() : \Traversable
    {
    }
    /**
     * Return the number of items in this DataList
     */
    public function count() : int
    {
    }
    /**
     * Returns the first item in this DataList (instanceof DataObject)
     *
     * The object returned is not cached, unlike {@link DataObject::get_one()}
     *
     * @return T|null
     */
    public function first()
    {
    }
    /**
     * Returns the last item in this DataList (instanceof DataObject)
     *
     * The object returned is not cached, unlike {@link DataObject::get_one()}
     *
     * @return T|null
     */
    public function last()
    {
    }
    /**
     * Find the first DataObject of this DataList where the given key = value
     *
     * The object returned is not cached, unlike {@link DataObject::get_one()}
     *
     * @param string $key
     * @param string $value
     * @return T|null
     */
    public function find($key, $value)
    {
    }
    /**
     * Filter this list to only contain the given Primary IDs
     *
     * @param array<int> $ids Array of integers
     * @return static<T>
     */
    public function byIDs($ids)
    {
    }
    /**
     * Return the first DataObject with the given ID
     *
     * The object returned is not cached, unlike {@link DataObject::get_by_id()}
     *
     * @param int $id
     * @return T|null
     */
    public function byID($id)
    {
    }
    /**
     * Add a number of items to the component set.
     *
     * @param array<int> $items Items to add, as either DataObjects or IDs.
     * @return static<T>
     */
    public function addMany($items)
    {
    }
    /**
     * Remove the items from this list with the given IDs
     *
     * @param array<string> $idList
     * @return static<T>
     */
    public function removeMany($idList)
    {
    }
    /**
     * Remove every element in this DataList matching the given $filter.
     *
     * @param string|array<string> $filter - a sql type where filter
     * @return static<T>
     */
    public function removeByFilter($filter)
    {
    }
    /**
     * Shuffle the datalist using a random function provided by the SQL engine
     *
     * @return static<T>
     */
    public function shuffle()
    {
    }
    /**
     * Remove every element in this DataList.
     *
     * @return static<T>
     */
    public function removeAll()
    {
    }
    /**
     * This method are overloaded by HasManyList and ManyMany list to perform more sophisticated
     * list manipulation
     *
     * @param T $item
     * @return void
     */
    public function add($item)
    {
    }
    /**
     * Remove this item by deleting it
     *
     * @param T $item
     * @return void
     */
    public function remove($item)
    {
    }
    /**
     * Remove an item from this DataList by ID
     *
     * @param int $itemID The primary ID
     * @return void
     */
    public function removeByID($itemID)
    {
    }
    /**
     * Reverses a list of items.
     *
     * @return static<T>
     */
    public function reverse()
    {
    }
    /**
     * Returns whether an item with $key exists
     */
    public function offsetExists(mixed $key) : bool
    {
    }
    /**
     * Returns item stored in list with index $key
     *
     * The object returned is not cached, unlike {@link DataObject::get_one()}
     * @return T|null
     */
    public function offsetGet(mixed $key) : ?\SilverStripe\ORM\DataObject
    {
    }
    /**
     * Set an item with the key in $key
     * @throws \BadMethodCallException
     */
    public function offsetSet(mixed $key, mixed $value) : void
    {
    }
    /**
     * Unset an item with the key in $key
     *
     * @throws \BadMethodCallException
     */
    public function offsetUnset(mixed $key) : void
    {
    }
}