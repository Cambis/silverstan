<?php

namespace SilverStripe\ORM;

/**
 * @property int $ID ID of the DataObject, 0 if the DataObject doesn't exist in database.
 * @property int $OldID ID of object, if deleted
 * @property string $Title
 * @property-read class-string<static> $ClassName Class name of the DataObject
 * @property-write class-string<self> $ClassName Class name of the DataObject
 * @property string $LastEdited Date and time of DataObject's last modification.
 * @property string $Created Date and time of DataObject creation.
 * @property ?class-string<static> $ObsoleteClassName If ClassName no longer exists this will be set to the legacy value
 */
class DataObject
{
    /**
     * @param string $fieldName Name of the field
     * @return ?\SilverStripe\ORM\FieldType\DBField The field as a DBField object
     */
    public function dbObject($fieldName)
    {
    }

    /**
     * Return the given element, searching by ID.
     *
     * This can be called either via `DataObject::get_by_id(MyClass::class, $id)`
     * or `MyClass::get_by_id($id)`
     *
     * The object returned is cached, unlike DataObject::get()->byID() {@link DataList::byID()}
     *
     * @template T of self
     * @param string|int $classOrID The class of the object to be returned, or id if called on target class
     * @phpstan-param class-string<T>|string|int $classOrID The class of the object to be returned, or id if called on target class
     * @param int|bool $idOrCache The id of the element, or cache if called on target class
     * @param boolean $cache See {@link get_one()}
     *
     * @return static|null The element
     * @phpstan-return ($classOrID is class-string<T> ? T|null : static|null)
     */
    public static function get_by_id($classOrID, $idOrCache = null, $cache = true)
    {
    }

    /**
     * Delete this data object.
     * $this->onBeforeDelete() gets called.
     * Note that in Versioned objects, both Stage and Live will be deleted.
     * @uses DataExtension::augmentSQL()
     *
     * @return void
     */
    public function delete()
    {
    }

     /**
     * Delete the record with the given ID.
     *
     * @param string $className The class name of the record to be deleted
     * @param int $id ID of record to be deleted
     * @return void
     */
    public static function delete_by_id($className, $id)
    {
    }
}
